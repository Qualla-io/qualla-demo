type User @entity {
  id: ID!
  tierTokens: [TierToken!] @derivedFrom(field: "owner")
  beamToekns: [BeamToken!] @derivedFrom(field: "owner")
  subscribers: [BeamToken!] @derivedFrom(field: "creator")
  nonce: BigInt
  approved: Boolean
  balance: BigInt
  flowRate: BigInt
  lastUpdated: BigInt
  ownedNFTs: [NftToken!] @derivedFrom(field: "owner")
  createdNFTs: [NftToken!] @derivedFrom(field: "creator")
}

type TierToken @entity {
  id: ID!
  quantity: BigInt!
  owner: User!
  flowRate: BigInt!
  paymentToken: String!
  activeTokens: [BeamToken!] @derivedFrom(field: "tierToken")
  testID: String
  txHash: String!
  # index: BigInt!
  initialSupply: BigInt!
}

type BeamToken @entity {
  id: ID!
  owner: User
  creator: User!
  flowRate: BigInt
  deposit: BigInt
  mintStamp: BingInt
  tierToken: TierToken
  testID: String
}

type NftToken @entity {
  id: ID!
  uriID: String!
  creator: User!
  owner: User!
  nonce: BigInt!
  mintStamp: BigInt!
  testID: String
}

type Transaction @entity {
  id: ID! #`${event.transaction.hash.toHex()} - ${event.logIndex.toString()}`
  from: User
  to: User!
  amount: BigInt!
  timestamp: BigInt!
}
