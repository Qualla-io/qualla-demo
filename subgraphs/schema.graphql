type User @entity {
  id: ID!
  tierTokens: [TierToken!] @derivedFrom(field: "owner")
  beamTokens: [BeamToken!] @derivedFrom(field: "owner")
  subscribers: [BeamToken!] @derivedFrom(field: "creator")
  nonce: BigInt
  approved: Boolean
  balances: [Balance!] @derivedFrom(field: "user")
  ownedNFTs: [NftToken!] @derivedFrom(field: "owner")
  createdNFTs: [NftToken!] @derivedFrom(field: "creator")
}

type Balance @entity {
  id: ID! #`${user.toHexString()} - ${token.toHexString()}`
  qtoken: Qtoken! 
  user: User!
  settledBalance: BigInt!
  netFlowrate: BigInt!
  netDeposit: BigInt!
  lastUpdated: BigInt!
}

type TierToken @entity {
  id: ID!
  quantity: BigInt!
  owner: User!
  flowRate: BigInt!
  paymentToken: Qtoken!
  activeTokens: [BeamToken!] @derivedFrom(field: "tierToken")
  initialSupply: BigInt!
}

type BeamToken @entity {
  id: ID!
  owner: User
  creator: User!
  flowRate: BigInt!
  deposit: BigInt!
  mintStamp: BigInt!
  tierToken: TierToken!
  testID: BigInt
  paymentToken: Qtoken!
}

type NftToken @entity {
  id: ID!
  uriID: String!
  creator: User!
  owner: User!
  nonce: BigInt!
  mintStamp: BigInt!
  testID: String
}

type Qtoken @entity {
  id: ID!
  underlyingToken: String!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

# type Transaction @entity {
#   id: ID! #`${event.transaction.hash.toHex()} - ${event.logIndex.toString()}`
#   from: User
#   to: User!
#   amount: BigInt!
#   timestamp: BigInt!
# }
