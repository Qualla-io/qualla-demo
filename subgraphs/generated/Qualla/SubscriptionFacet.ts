// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SubscriptionFacet__getBaseTokenResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get paymentToken(): Address {
    return this[1].toAddress();
  }

  get paymentValue(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class SubscriptionFacet__getSubTokenResultValue0Struct extends ethereum.Tuple {
  get nonce(): BigInt {
    return this[0].toBigInt();
  }

  get nextWidthdraw(): BigInt {
    return this[1].toBigInt();
  }

  get mintStamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class SubscriptionFacet extends ethereum.SmartContract {
  static bind(address: Address): SubscriptionFacet {
    return new SubscriptionFacet("SubscriptionFacet", address);
  }

  getBaseIdFromToken(id_: BigInt): BigInt {
    let result = super.call(
      "getBaseIdFromToken",
      "getBaseIdFromToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );

    return result[0].toBigInt();
  }

  try_getBaseIdFromToken(id_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseIdFromToken",
      "getBaseIdFromToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseToken(id: BigInt): SubscriptionFacet__getBaseTokenResultValue0Struct {
    let result = super.call(
      "getBaseToken",
      "getBaseToken(uint256):((address,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as SubscriptionFacet__getBaseTokenResultValue0Struct;
  }

  try_getBaseToken(
    id: BigInt
  ): ethereum.CallResult<SubscriptionFacet__getBaseTokenResultValue0Struct> {
    let result = super.tryCall(
      "getBaseToken",
      "getBaseToken(uint256):((address,address,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as SubscriptionFacet__getBaseTokenResultValue0Struct
    );
  }

  getSubToken(id: BigInt): SubscriptionFacet__getSubTokenResultValue0Struct {
    let result = super.call(
      "getSubToken",
      "getSubToken(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as SubscriptionFacet__getSubTokenResultValue0Struct;
  }

  try_getSubToken(
    id: BigInt
  ): ethereum.CallResult<SubscriptionFacet__getSubTokenResultValue0Struct> {
    let result = super.tryCall(
      "getSubToken",
      "getSubToken(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as SubscriptionFacet__getSubTokenResultValue0Struct
    );
  }
}

export class BurnSubscriptionCall extends ethereum.Call {
  get inputs(): BurnSubscriptionCall__Inputs {
    return new BurnSubscriptionCall__Inputs(this);
  }

  get outputs(): BurnSubscriptionCall__Outputs {
    return new BurnSubscriptionCall__Outputs(this);
  }
}

export class BurnSubscriptionCall__Inputs {
  _call: BurnSubscriptionCall;

  constructor(call: BurnSubscriptionCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BurnSubscriptionCall__Outputs {
  _call: BurnSubscriptionCall;

  constructor(call: BurnSubscriptionCall) {
    this._call = call;
  }
}

export class BuySubscriptionCall extends ethereum.Call {
  get inputs(): BuySubscriptionCall__Inputs {
    return new BuySubscriptionCall__Inputs(this);
  }

  get outputs(): BuySubscriptionCall__Outputs {
    return new BuySubscriptionCall__Outputs(this);
  }
}

export class BuySubscriptionCall__Inputs {
  _call: BuySubscriptionCall;

  constructor(call: BuySubscriptionCall) {
    this._call = call;
  }

  get subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BuySubscriptionCall__Outputs {
  _call: BuySubscriptionCall;

  constructor(call: BuySubscriptionCall) {
    this._call = call;
  }
}

export class ExecuteSubscriptionCall extends ethereum.Call {
  get inputs(): ExecuteSubscriptionCall__Inputs {
    return new ExecuteSubscriptionCall__Inputs(this);
  }

  get outputs(): ExecuteSubscriptionCall__Outputs {
    return new ExecuteSubscriptionCall__Outputs(this);
  }
}

export class ExecuteSubscriptionCall__Inputs {
  _call: ExecuteSubscriptionCall;

  constructor(call: ExecuteSubscriptionCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get subscriber(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExecuteSubscriptionCall__Outputs {
  _call: ExecuteSubscriptionCall;

  constructor(call: ExecuteSubscriptionCall) {
    this._call = call;
  }
}

export class MintBatchSubscriptionCall extends ethereum.Call {
  get inputs(): MintBatchSubscriptionCall__Inputs {
    return new MintBatchSubscriptionCall__Inputs(this);
  }

  get outputs(): MintBatchSubscriptionCall__Outputs {
    return new MintBatchSubscriptionCall__Outputs(this);
  }
}

export class MintBatchSubscriptionCall__Inputs {
  _call: MintBatchSubscriptionCall;

  constructor(call: MintBatchSubscriptionCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get paymentTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get paymentValues(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class MintBatchSubscriptionCall__Outputs {
  _call: MintBatchSubscriptionCall;

  constructor(call: MintBatchSubscriptionCall) {
    this._call = call;
  }
}

export class MintSubscriptionCall extends ethereum.Call {
  get inputs(): MintSubscriptionCall__Inputs {
    return new MintSubscriptionCall__Inputs(this);
  }

  get outputs(): MintSubscriptionCall__Outputs {
    return new MintSubscriptionCall__Outputs(this);
  }
}

export class MintSubscriptionCall__Inputs {
  _call: MintSubscriptionCall;

  constructor(call: MintSubscriptionCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get paymentValue(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class MintSubscriptionCall__Outputs {
  _call: MintSubscriptionCall;

  constructor(call: MintSubscriptionCall) {
    this._call = call;
  }
}

export class UnSubscribeCall extends ethereum.Call {
  get inputs(): UnSubscribeCall__Inputs {
    return new UnSubscribeCall__Inputs(this);
  }

  get outputs(): UnSubscribeCall__Outputs {
    return new UnSubscribeCall__Outputs(this);
  }
}

export class UnSubscribeCall__Inputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }

  get subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class UnSubscribeCall__Outputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }
}
