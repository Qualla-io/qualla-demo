// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class WrapperDeployed extends ethereum.Event {
  get params(): WrapperDeployed__Params {
    return new WrapperDeployed__Params(this);
  }
}

export class WrapperDeployed__Params {
  _event: WrapperDeployed;

  constructor(event: WrapperDeployed) {
    this._event = event;
  }

  get qToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class TokenFactory extends ethereum.SmartContract {
  static bind(address: Address): TokenFactory {
    return new TokenFactory("TokenFactory", address);
  }

  getTokenWrapper(token: Address): Address {
    let result = super.call(
      "getTokenWrapper",
      "getTokenWrapper(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_getTokenWrapper(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenWrapper",
      "getTokenWrapper(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DemoMintWrappedERC20Call extends ethereum.Call {
  get inputs(): DemoMintWrappedERC20Call__Inputs {
    return new DemoMintWrappedERC20Call__Inputs(this);
  }

  get outputs(): DemoMintWrappedERC20Call__Outputs {
    return new DemoMintWrappedERC20Call__Outputs(this);
  }
}

export class DemoMintWrappedERC20Call__Inputs {
  _call: DemoMintWrappedERC20Call;

  constructor(call: DemoMintWrappedERC20Call) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DemoMintWrappedERC20Call__Outputs {
  _call: DemoMintWrappedERC20Call;

  constructor(call: DemoMintWrappedERC20Call) {
    this._call = call;
  }
}

export class DeployERC20WrapperCall extends ethereum.Call {
  get inputs(): DeployERC20WrapperCall__Inputs {
    return new DeployERC20WrapperCall__Inputs(this);
  }

  get outputs(): DeployERC20WrapperCall__Outputs {
    return new DeployERC20WrapperCall__Outputs(this);
  }
}

export class DeployERC20WrapperCall__Inputs {
  _call: DeployERC20WrapperCall;

  constructor(call: DeployERC20WrapperCall) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingDecimals(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class DeployERC20WrapperCall__Outputs {
  _call: DeployERC20WrapperCall;

  constructor(call: DeployERC20WrapperCall) {
    this._call = call;
  }
}

export class DeployERC20WrapperInfoCall extends ethereum.Call {
  get inputs(): DeployERC20WrapperInfoCall__Inputs {
    return new DeployERC20WrapperInfoCall__Inputs(this);
  }

  get outputs(): DeployERC20WrapperInfoCall__Outputs {
    return new DeployERC20WrapperInfoCall__Outputs(this);
  }
}

export class DeployERC20WrapperInfoCall__Inputs {
  _call: DeployERC20WrapperInfoCall;

  constructor(call: DeployERC20WrapperInfoCall) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DeployERC20WrapperInfoCall__Outputs {
  _call: DeployERC20WrapperInfoCall;

  constructor(call: DeployERC20WrapperInfoCall) {
    this._call = call;
  }
}
