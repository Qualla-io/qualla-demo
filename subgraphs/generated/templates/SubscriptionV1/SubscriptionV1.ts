// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Received extends ethereum.Event {
  get params(): Received__Params {
    return new Received__Params(this);
  }
}

export class Received__Params {
  _event: Received;

  constructor(event: Received) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class contractModified extends ethereum.Event {
  get params(): contractModified__Params {
    return new contractModified__Params(this);
  }
}

export class contractModified__Params {
  _event: contractModified;

  constructor(event: contractModified) {
    this._event = event;
  }

  get paymentTokens(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get publisherNonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class newSubscriber extends ethereum.Event {
  get params(): newSubscriber__Params {
    return new newSubscriber__Params(this);
  }
}

export class newSubscriber__Params {
  _event: newSubscriber;

  constructor(event: newSubscriber) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get subNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get subscriptionHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get signedHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class subscriptionExecuted extends ethereum.Event {
  get params(): subscriptionExecuted__Params {
    return new subscriptionExecuted__Params(this);
  }
}

export class subscriptionExecuted__Params {
  _event: subscriptionExecuted;

  constructor(event: subscriptionExecuted) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nextWithdraw(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get subnumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class subscriptionModified extends ethereum.Event {
  get params(): subscriptionModified__Params {
    return new subscriptionModified__Params(this);
  }
}

export class subscriptionModified__Params {
  _event: subscriptionModified;

  constructor(event: subscriptionModified) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get subscriptionHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get signedHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class SubscriptionV1__allSubscribersResult {
  value0: Address;
  value1: Address;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Bytes;

  constructor(
    value0: Address,
    value1: Address,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBytes(this.value6));
    return map;
  }
}

export class SubscriptionV1 extends ethereum.SmartContract {
  static bind(address: Address): SubscriptionV1 {
    return new SubscriptionV1("SubscriptionV1", address);
  }

  acceptedValues(param0: BigInt): BigInt {
    let result = super.call(
      "acceptedValues",
      "acceptedValues(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_acceptedValues(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptedValues",
      "acceptedValues(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allSubscribers(param0: BigInt): SubscriptionV1__allSubscribersResult {
    let result = super.call(
      "allSubscribers",
      "allSubscribers(uint256):(address,address,uint8,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SubscriptionV1__allSubscribersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBytes()
    );
  }

  try_allSubscribers(
    param0: BigInt
  ): ethereum.CallResult<SubscriptionV1__allSubscribersResult> {
    let result = super.tryCall(
      "allSubscribers",
      "allSubscribers(uint256):(address,address,uint8,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SubscriptionV1__allSubscribersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBytes()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashToSubscription(param0: Bytes): BigInt {
    let result = super.call(
      "hashToSubscription",
      "hashToSubscription(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_hashToSubscription(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashToSubscription",
      "hashToSubscription(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentTokens(param0: BigInt): Address {
    let result = super.call(
      "paymentTokens",
      "paymentTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_paymentTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paymentTokens",
      "paymentTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publisher(): Address {
    let result = super.call("publisher", "publisher():(address)", []);

    return result[0].toAddress();
  }

  try_publisher(): ethereum.CallResult<Address> {
    let result = super.tryCall("publisher", "publisher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publisherNonce(): BigInt {
    let result = super.call("publisherNonce", "publisherNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_publisherNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publisherNonce",
      "publisherNonce():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validToken(param0: Address): boolean {
    let result = super.call("validToken", "validToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_validToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("validToken", "validToken(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validValue(param0: BigInt): boolean {
    let result = super.call("validValue", "validValue(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_validValue(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("validValue", "validValue(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSubscriptionHash(
    subscriber: Address,
    value: BigInt,
    paymentToken: Address,
    nonce: BigInt,
    status: i32
  ): Bytes {
    let result = super.call(
      "getSubscriptionHash",
      "getSubscriptionHash(address,uint256,address,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(subscriber),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(status))
      ]
    );

    return result[0].toBytes();
  }

  try_getSubscriptionHash(
    subscriber: Address,
    value: BigInt,
    paymentToken: Address,
    nonce: BigInt,
    status: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSubscriptionHash",
      "getSubscriptionHash(address,uint256,address,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(subscriber),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(status))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPublisherModificationHash(
    _paymentTokens: Array<Address>,
    _acceptedValues: Array<BigInt>,
    _publisherNonce: BigInt
  ): Bytes {
    let result = super.call(
      "getPublisherModificationHash",
      "getPublisherModificationHash(address[],uint256[],uint256):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_paymentTokens),
        ethereum.Value.fromUnsignedBigIntArray(_acceptedValues),
        ethereum.Value.fromUnsignedBigInt(_publisherNonce)
      ]
    );

    return result[0].toBytes();
  }

  try_getPublisherModificationHash(
    _paymentTokens: Array<Address>,
    _acceptedValues: Array<BigInt>,
    _publisherNonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPublisherModificationHash",
      "getPublisherModificationHash(address[],uint256[],uint256):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_paymentTokens),
        ethereum.Value.fromUnsignedBigIntArray(_acceptedValues),
        ethereum.Value.fromUnsignedBigInt(_publisherNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allSubscribersLength(): BigInt {
    let result = super.call(
      "allSubscribersLength",
      "allSubscribersLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allSubscribersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allSubscribersLength",
      "allSubscribersLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptedValuesLength(): BigInt {
    let result = super.call(
      "acceptedValuesLength",
      "acceptedValuesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_acceptedValuesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptedValuesLength",
      "acceptedValuesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentTokensLength(): BigInt {
    let result = super.call(
      "paymentTokensLength",
      "paymentTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentTokensLength",
      "paymentTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isHashValid(subscriptionHash: Bytes): boolean {
    let result = super.call("isHashValid", "isHashValid(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(subscriptionHash)
    ]);

    return result[0].toBoolean();
  }

  try_isHashValid(subscriptionHash: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isHashValid", "isHashValid(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(subscriptionHash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _publisher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _paymentTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _acceptedValues(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class CreateSubscriptionCall extends ethereum.Call {
  get inputs(): CreateSubscriptionCall__Inputs {
    return new CreateSubscriptionCall__Inputs(this);
  }

  get outputs(): CreateSubscriptionCall__Outputs {
    return new CreateSubscriptionCall__Outputs(this);
  }
}

export class CreateSubscriptionCall__Inputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }

  get _subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _signedHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateSubscriptionCall__Outputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }
}

export class ExecuteSubscriptionCall extends ethereum.Call {
  get inputs(): ExecuteSubscriptionCall__Inputs {
    return new ExecuteSubscriptionCall__Inputs(this);
  }

  get outputs(): ExecuteSubscriptionCall__Outputs {
    return new ExecuteSubscriptionCall__Outputs(this);
  }
}

export class ExecuteSubscriptionCall__Inputs {
  _call: ExecuteSubscriptionCall;

  constructor(call: ExecuteSubscriptionCall) {
    this._call = call;
  }

  get subscriptionHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteSubscriptionCall__Outputs {
  _call: ExecuteSubscriptionCall;

  constructor(call: ExecuteSubscriptionCall) {
    this._call = call;
  }
}

export class ModifySubscriptionCall extends ethereum.Call {
  get inputs(): ModifySubscriptionCall__Inputs {
    return new ModifySubscriptionCall__Inputs(this);
  }

  get outputs(): ModifySubscriptionCall__Outputs {
    return new ModifySubscriptionCall__Outputs(this);
  }
}

export class ModifySubscriptionCall__Inputs {
  _call: ModifySubscriptionCall;

  constructor(call: ModifySubscriptionCall) {
    this._call = call;
  }

  get _subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get status(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _currentSubscriptionHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _signedModifyHash(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ModifySubscriptionCall__Outputs {
  _call: ModifySubscriptionCall;

  constructor(call: ModifySubscriptionCall) {
    this._call = call;
  }
}

export class ModifyContractCall extends ethereum.Call {
  get inputs(): ModifyContractCall__Inputs {
    return new ModifyContractCall__Inputs(this);
  }

  get outputs(): ModifyContractCall__Outputs {
    return new ModifyContractCall__Outputs(this);
  }
}

export class ModifyContractCall__Inputs {
  _call: ModifyContractCall;

  constructor(call: ModifyContractCall) {
    this._call = call;
  }

  get _paymentTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _acceptedValues(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _signedModifyHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ModifyContractCall__Outputs {
  _call: ModifyContractCall;

  constructor(call: ModifyContractCall) {
    this._call = call;
  }
}
