// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tierTokens(): Array<string> | null {
    let value = this.get("tierTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tierTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("tierTokens");
    } else {
      this.set("tierTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get beamTokens(): Array<string> | null {
    let value = this.get("beamTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set beamTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("beamTokens");
    } else {
      this.set("beamTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get subscribers(): Array<string> | null {
    let value = this.get("subscribers");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subscribers(value: Array<string> | null) {
    if (value === null) {
      this.unset("subscribers");
    } else {
      this.set("subscribers", Value.fromStringArray(value as Array<string>));
    }
  }

  get nonce(): BigInt | null {
    let value = this.get("nonce");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt | null) {
    if (value === null) {
      this.unset("nonce");
    } else {
      this.set("nonce", Value.fromBigInt(value as BigInt));
    }
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get balances(): Array<string> | null {
    let value = this.get("balances");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set balances(value: Array<string> | null) {
    if (value === null) {
      this.unset("balances");
    } else {
      this.set("balances", Value.fromStringArray(value as Array<string>));
    }
  }

  get ownedNFTs(): Array<string> | null {
    let value = this.get("ownedNFTs");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ownedNFTs(value: Array<string> | null) {
    if (value === null) {
      this.unset("ownedNFTs");
    } else {
      this.set("ownedNFTs", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdNFTs(): Array<string> | null {
    let value = this.get("createdNFTs");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdNFTs(value: Array<string> | null) {
    if (value === null) {
      this.unset("createdNFTs");
    } else {
      this.set("createdNFTs", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Balance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Balance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Balance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Balance", id.toString(), this);
  }

  static load(id: string): Balance | null {
    return store.get("Balance", id) as Balance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get qtoken(): string {
    let value = this.get("qtoken");
    return value.toString();
  }

  set qtoken(value: string) {
    this.set("qtoken", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get settledBalance(): BigInt {
    let value = this.get("settledBalance");
    return value.toBigInt();
  }

  set settledBalance(value: BigInt) {
    this.set("settledBalance", Value.fromBigInt(value));
  }

  get netFlowrate(): BigInt {
    let value = this.get("netFlowrate");
    return value.toBigInt();
  }

  set netFlowrate(value: BigInt) {
    this.set("netFlowrate", Value.fromBigInt(value));
  }

  get netDeposit(): BigInt {
    let value = this.get("netDeposit");
    return value.toBigInt();
  }

  set netDeposit(value: BigInt) {
    this.set("netDeposit", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class TierToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TierToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TierToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TierToken", id.toString(), this);
  }

  static load(id: string): TierToken | null {
    return store.get("TierToken", id) as TierToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get flowRate(): BigInt {
    let value = this.get("flowRate");
    return value.toBigInt();
  }

  set flowRate(value: BigInt) {
    this.set("flowRate", Value.fromBigInt(value));
  }

  get paymentToken(): string {
    let value = this.get("paymentToken");
    return value.toString();
  }

  set paymentToken(value: string) {
    this.set("paymentToken", Value.fromString(value));
  }

  get activeTokens(): Array<string> | null {
    let value = this.get("activeTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set activeTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("activeTokens");
    } else {
      this.set("activeTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get initialSupply(): BigInt {
    let value = this.get("initialSupply");
    return value.toBigInt();
  }

  set initialSupply(value: BigInt) {
    this.set("initialSupply", Value.fromBigInt(value));
  }
}

export class BeamToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BeamToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BeamToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BeamToken", id.toString(), this);
  }

  static load(id: string): BeamToken | null {
    return store.get("BeamToken", id) as BeamToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get flowRate(): BigInt {
    let value = this.get("flowRate");
    return value.toBigInt();
  }

  set flowRate(value: BigInt) {
    this.set("flowRate", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get mintStamp(): BigInt {
    let value = this.get("mintStamp");
    return value.toBigInt();
  }

  set mintStamp(value: BigInt) {
    this.set("mintStamp", Value.fromBigInt(value));
  }

  get tierToken(): string {
    let value = this.get("tierToken");
    return value.toString();
  }

  set tierToken(value: string) {
    this.set("tierToken", Value.fromString(value));
  }

  get testID(): BigInt | null {
    let value = this.get("testID");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set testID(value: BigInt | null) {
    if (value === null) {
      this.unset("testID");
    } else {
      this.set("testID", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentToken(): string {
    let value = this.get("paymentToken");
    return value.toString();
  }

  set paymentToken(value: string) {
    this.set("paymentToken", Value.fromString(value));
  }
}

export class NftToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NftToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NftToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NftToken", id.toString(), this);
  }

  static load(id: string): NftToken | null {
    return store.get("NftToken", id) as NftToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uriID(): string {
    let value = this.get("uriID");
    return value.toString();
  }

  set uriID(value: string) {
    this.set("uriID", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get mintStamp(): BigInt {
    let value = this.get("mintStamp");
    return value.toBigInt();
  }

  set mintStamp(value: BigInt) {
    this.set("mintStamp", Value.fromBigInt(value));
  }

  get testID(): string | null {
    let value = this.get("testID");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set testID(value: string | null) {
    if (value === null) {
      this.unset("testID");
    } else {
      this.set("testID", Value.fromString(value as string));
    }
  }
}

export class Qtoken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Qtoken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Qtoken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Qtoken", id.toString(), this);
  }

  static load(id: string): Qtoken | null {
    return store.get("Qtoken", id) as Qtoken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingToken(): string {
    let value = this.get("underlyingToken");
    return value.toString();
  }

  set underlyingToken(value: string) {
    this.set("underlyingToken", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}
