// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BeamTransfer extends ethereum.Event {
  get params(): BeamTransfer__Params {
    return new BeamTransfer__Params(this);
  }
}

export class BeamTransfer__Params {
  _event: BeamTransfer;

  constructor(event: BeamTransfer) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tierId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get deposit(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class FlowUpdated extends ethereum.Event {
  get params(): FlowUpdated__Params {
    return new FlowUpdated__Params(this);
  }
}

export class FlowUpdated__Params {
  _event: FlowUpdated;

  constructor(event: FlowUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get netFlow(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get netDeposit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BeamToken__getBeamTokenResultValue0Struct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get from(): Address {
    return this[1].toAddress();
  }

  get flowRate(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get mintStamp(): BigInt {
    return this[4].toBigInt();
  }

  get paymentToken(): Address {
    return this[5].toAddress();
  }
}

export class BeamToken__realtimeBalanceOfResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BeamToken extends ethereum.SmartContract {
  static bind(address: Address): BeamToken {
    return new BeamToken("BeamToken", address);
  }

  getBeamToken(id: BigInt): BeamToken__getBeamTokenResultValue0Struct {
    let result = super.call(
      "getBeamToken",
      "getBeamToken(uint256):((address,address,uint256,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as BeamToken__getBeamTokenResultValue0Struct;
  }

  try_getBeamToken(
    id: BigInt
  ): ethereum.CallResult<BeamToken__getBeamTokenResultValue0Struct> {
    let result = super.tryCall(
      "getBeamToken",
      "getBeamToken(uint256):((address,address,uint256,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as BeamToken__getBeamTokenResultValue0Struct
    );
  }

  getTierIdFromBeamToken(id_: BigInt): BigInt {
    let result = super.call(
      "getTierIdFromBeamToken",
      "getTierIdFromBeamToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );

    return result[0].toBigInt();
  }

  try_getTierIdFromBeamToken(id_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierIdFromBeamToken",
      "getTierIdFromBeamToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  realtimeBalanceOf(
    token: Address,
    account: Address,
    timestamp: BigInt
  ): BeamToken__realtimeBalanceOfResult {
    let result = super.call(
      "realtimeBalanceOf",
      "realtimeBalanceOf(address,address,uint256):(int256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return new BeamToken__realtimeBalanceOfResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_realtimeBalanceOf(
    token: Address,
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BeamToken__realtimeBalanceOfResult> {
    let result = super.tryCall(
      "realtimeBalanceOf",
      "realtimeBalanceOf(address,address,uint256):(int256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BeamToken__realtimeBalanceOfResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class MintBeamCall extends ethereum.Call {
  get inputs(): MintBeamCall__Inputs {
    return new MintBeamCall__Inputs(this);
  }

  get outputs(): MintBeamCall__Outputs {
    return new MintBeamCall__Outputs(this);
  }
}

export class MintBeamCall__Inputs {
  _call: MintBeamCall;

  constructor(call: MintBeamCall) {
    this._call = call;
  }

  get subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintBeamCall__Outputs {
  _call: MintBeamCall;

  constructor(call: MintBeamCall) {
    this._call = call;
  }
}

export class UnSubscribeCall extends ethereum.Call {
  get inputs(): UnSubscribeCall__Inputs {
    return new UnSubscribeCall__Inputs(this);
  }

  get outputs(): UnSubscribeCall__Outputs {
    return new UnSubscribeCall__Outputs(this);
  }
}

export class UnSubscribeCall__Inputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }

  get subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class UnSubscribeCall__Outputs {
  _call: UnSubscribeCall;

  constructor(call: UnSubscribeCall) {
    this._call = call;
  }
}
