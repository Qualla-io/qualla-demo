// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class factoryModified extends ethereum.Event {
  get params(): factoryModified__Params {
    return new factoryModified__Params(this);
  }
}

export class factoryModified__Params {
  _event: factoryModified;

  constructor(event: factoryModified) {
    this._event = event;
  }

  get master(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class subscriptionCreated extends ethereum.Event {
  get params(): subscriptionCreated__Params {
    return new subscriptionCreated__Params(this);
  }
}

export class subscriptionCreated__Params {
  _event: subscriptionCreated;

  constructor(event: subscriptionCreated) {
    this._event = event;
  }

  get publisher(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subscription(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paymentTokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get acceptedValues(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class SubscriptionFactory extends ethereum.SmartContract {
  static bind(address: Address): SubscriptionFactory {
    return new SubscriptionFactory("SubscriptionFactory", address);
  }

  allSubscriptions(param0: BigInt): Address {
    let result = super.call(
      "allSubscriptions",
      "allSubscriptions(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allSubscriptions(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allSubscriptions",
      "allSubscriptions(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubscription(param0: Address): Address {
    let result = super.call(
      "getSubscription",
      "getSubscription(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_getSubscription(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSubscription",
      "getSubscription(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  master(): Address {
    let result = super.call("master", "master():(address)", []);

    return result[0].toAddress();
  }

  try_master(): ethereum.CallResult<Address> {
    let result = super.tryCall("master", "master():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allSubscriptionsLength(): BigInt {
    let result = super.call(
      "allSubscriptionsLength",
      "allSubscriptionsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allSubscriptionsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allSubscriptionsLength",
      "allSubscriptionsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createSubscription(
    publisher: Address,
    paymentTokens: Array<Address>,
    acceptedValues: Array<BigInt>
  ): Address {
    let result = super.call(
      "createSubscription",
      "createSubscription(address,address[],uint256[]):(address)",
      [
        ethereum.Value.fromAddress(publisher),
        ethereum.Value.fromAddressArray(paymentTokens),
        ethereum.Value.fromUnsignedBigIntArray(acceptedValues)
      ]
    );

    return result[0].toAddress();
  }

  try_createSubscription(
    publisher: Address,
    paymentTokens: Array<Address>,
    acceptedValues: Array<BigInt>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSubscription",
      "createSubscription(address,address[],uint256[]):(address)",
      [
        ethereum.Value.fromAddress(publisher),
        ethereum.Value.fromAddressArray(paymentTokens),
        ethereum.Value.fromUnsignedBigIntArray(acceptedValues)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSubscriptionCall extends ethereum.Call {
  get inputs(): CreateSubscriptionCall__Inputs {
    return new CreateSubscriptionCall__Inputs(this);
  }

  get outputs(): CreateSubscriptionCall__Outputs {
    return new CreateSubscriptionCall__Outputs(this);
  }
}

export class CreateSubscriptionCall__Inputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }

  get publisher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get paymentTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get acceptedValues(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CreateSubscriptionCall__Outputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }

  get subscription(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetMasterCall extends ethereum.Call {
  get inputs(): SetMasterCall__Inputs {
    return new SetMasterCall__Inputs(this);
  }

  get outputs(): SetMasterCall__Outputs {
    return new SetMasterCall__Outputs(this);
  }
}

export class SetMasterCall__Inputs {
  _call: SetMasterCall;

  constructor(call: SetMasterCall) {
    this._call = call;
  }

  get _master(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMasterCall__Outputs {
  _call: SetMasterCall;

  constructor(call: SetMasterCall) {
    this._call = call;
  }
}
